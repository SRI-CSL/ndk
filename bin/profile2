#!/usr/bin/env python

import sys
import math
import argparse
import numpy as np
import ndk.es.db3 as db
# import matplotlib

parser = argparse.ArgumentParser(description='Profile an event source, emitting mean amplitudes and ISIs.')
parser.add_argument('files',  metavar='FILE', nargs=1, help='An sqlite3 database file.')
parser.add_argument('-window', type=int, default=100000, help='Window to use (in samples) to average the desired quantities.')
parser.add_argument('-channel', type=int, default=0, help='Channel to use to average amplitudes.')
parser.add_argument('-event', default=None, help='If supplied, the event number to start at.')
parser.add_argument('-step', type=int, default=1000, help='Step size to use for windowing.')
ns = parser.parse_args()

esname = ns.files[0]

esobj = db.open_event_store(esname)

start_time, end_time = esobj.get_dataset_interval()

if ns.event is not None:
    sys.stderr.write('# Looking for event {}\n'.format(ns.event))
    eventnum = ns.event
    event_list = esobj.get_events()
    for ts, enum in event_list:
        if enum == eventnum:
            sys.stderr.write('# Found event at {}\n'.format(ts))
            start_time = ts

window = ns.window
step = ns.step
chan = ns.channel
time = start_time
rate = esobj.sample_rate
pp = 0

nspikes = esobj.get_spike_count()

times = np.zeros(nspikes, dtype=np.uint32)
amps = np.zeros(nspikes)

esobj.execute('select spikeID, samplenum from spiketimes order by samplenum')
r = esobj.fetchall()

for i in range(len(r)):
    times[i] = r[i][1]
    w = esobj.get_spike_waveform(r[i][0], chan)
    amps[i] = w.max() - w.min()
    if i % 100 == 0:
        sys.stderr.write('{} '.format(i))
        sys.stderr.flush()

sys.stderr.write('Done collecting.\n')

def count_spikes(array, index, to_time):
    i = index
    while i < len(array):
        if array[i] >= to_time:
            return (i - index), i
        i += 1
    return (i - index), i

print('# Number of data points; {}'.format(nspikes))
i = 0
hwin = window / 2
while time < end_time:
    # Get spike IDs for the interval:
    t0 = time
    t1 = time + window
    mean_freq = 0.0
    mean_amp = 0.0
    amp_sum = 0.0
    isi_sum = 0.0
    n, next_i = count_spikes(times, i, t1)
    if n > 1:
        mean_amp == amps[i]
        for k in range(i+1,next_i):
            isi = (times[k] - times[k-1]) / rate
            isi_sum += isi
            amp_sum += amps[k]
        mean_freq = float(n) / isi_sum
        mean_amp = amp_sum / float(n)
    ctime = (time + hwin) / rate
    print('{} {} {}'.format(ctime, mean_amp, mean_freq))

    np = int( (100 * (time - start_time)) / (end_time - start_time) )
    if np != pp:
        sys.stderr.write('{}%\r'.format(np))
        pp = np
    time += step
    i = next_i
esobj.close()

    
    


#!/usr/bin/env python

# Pull out the discrete events (e.g., injection times) from an smr
# file.

import os
import sys
import neo
import glob
import numpy
import ndk.ds
import ndk.es.db3 as db
import quantities
from neo import io
import scipy

#
# Some globals that govern behavior:
#

if (len(sys.argv) < 2):
    print( "Usage: smrevents <dbfile> [-show]" )
    quit()


fname = sys.argv[1]
suffix = fname.split('.')[-1]

if suffix == 'db':
    commit = True
    if len(sys.argv) > 2:
        commit = False
    
    dbobj = db.db3(fname)
    dbobj.make_event_table()
    #
    # Open a spike2 file  and report the events.
    #
    sample_rate, nchannels, uri = dbobj.get_metadata()
else:
    uri = fname
    dbobj = None
    commit = False

r = ndk.ds.open(uri)
seg = r.seg
rate = seg.analogsignals[0].sampling_rate
eventarrays = seg.events
# This is the only sane thing to do, since the ultimate source for
# event data is the smr file:
if dbobj is not None:
    dbobj.clear_events()

for event in eventarrays:
    for i in range(0,len(event.times)):
        label = event.labels[i]
        time = event.times[i]
        print('Event {} at time {}, samplenum={}.'.format(label, time, int(time*rate)))
        samplenum = int(time*rate)
        if commit:
            dbobj.add_event(label, samplenum)

if dbobj is not None:
    dbobj.close()
